#+title: The Family's treasure - developer guide

* License header

  This license header should be added in each python file:

  #+BEGIN_SRC python
    # This file is part of The Family's treasure tale.

    # The Family's treasure tale is free software: you can redistribute it
    # and/or modify it under the terms of the GNU General Public License
    # as published by the Free Software Foundation, either version 3 of
    # the License, or (at your option) any later version.

    # The Family's treasure tale is distributed in the hope that it will
    # be useful, but WITHOUT ANY WARRANTY; without even the implied
    # warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    # See the GNU General Public License for more details.

    # You should have received a copy of the GNU General Public License
    # along with The Family's treasure tale.  If not, see
    # <http://www.gnu.org/licenses/>.
  #+END_SRC
* Entity Component System
** World creation

   #+BEGIN_SRC python
   from ecs import World
   world = World()
   #+END_SRC

** Components

   Components are simple python classes. Their type is given by their
   class.

** Entities
*** Creation

    #+BEGIN_SRC python
    entity = world.entity()
    #+END_SRC

*** Adding component

    #+BEGIN_SRC python
      from geometry import Positionable
      # ...
      x, y = 10, 20
      entity.add_component(
          Positionable(x, y)
      )

      # Several components at one time
      entity.add_components(
          Renderable('image.png'),
          Clickable(lambda: sys.stdout.write("Hello\n"))
      )
    #+END_SRC

*** Requesting world

    #+BEGIN_SRC python
      for entity in world.get_entities([Positionable, Renderable]):
          print entity.get_component(Positionable).x
    #+END_SRC
* Graphics
** Creating a renderable component

   First of all, to be renderable, an entity must be positionable. If
   it is not the case, the entity simply won't be rendered.

   Then, to create Ã  renderable entity :

   #+BEGIN_SRC python
     from graphics import Renderable

     # entity creation ...

     entity.add_component(
         Renderable(render_func, layer)
     )
   #+END_SRC

   Where /render_func/ is a function that contains the directives to
   draw the entity. It takes a Brush object as parameter. See the
   Brush class in [[file:family_treasure/graphics.py][graphics.py]] to learn its methods.

   The layer is a number that tells which entity will be drawn over
   which other. A higher layer will be drawn over a lower layer.

   *Important*: The position provided by the Positionable component of
   the entity is already injected in the Brush, so the drawing in the
   rendering function must be relative to it.

** Adding methods to Brush

   When a method is missing in the Brush class (e.g. drawing images or
   hearts or whatever), don't hesitate to add methods to it. Some
   considerations :

   - in Brush, /self.screen/ is a Screen object, so the pygame screen
     surface can be accessed using /self.screen.pygame_screen/.
   - do not forget to take in account the base position that has been
     injected to the Brush. the properties /x/ and /y/ will return
     them.

** Drawing text
   
   The Brush is able to draw text from pygame.font functions.
   Some considerations are to be taken if you want to create a text entity :

   - You must create the positionable component with the function 
   /get_text_positionable/ which let pygame compute the width and height of
   the positionable component.
   - You can give the text a colorable component. This component is designed
   for monochrome entities whose color can be changed by events.
   - You can use the util functions /create_text_entity/ and 
   /create_hoverable_text_entity/ from [[file:family_treasure/game.py][game.py]]. The second creates a text
   entity whose color changes when it is hovered.
   
* Mouse
** Creating a clickable component
   First of all, to be clickable, the entity must be positionable.

   Then, to create a clickable entity:
   
   #+BEGIN_SRC python
     from graphics import Clickable

     # entity creation ...

     entity.add_component(
         Clickable(callback, button)
     )
   #+END_SRC#

   Where /callback/ is the callback function called when the entity is
   clicked. It accepts no arguments.
   /button/ is the button that must be clicked. It can be mouse.Button.LEFT
   or mouse.Button.RIGHT

** Creating a hoverable component
   First of all, to be hoverable, the entity must be positionable.

   Then, to create a hoverable entity:
   
   #+BEGIN_SRC python
     from mouse import Clickable

     # entity creation ...

     entity.add_component(
         Hoverable(callback_hovered, callback_unhovered)
     )
   #+END_SRC#

   Where /callback_hovered/ and /callback_unhovered/ are functions called
   respectively when the mouse get in and out the entity. They accept no
   arguments.

* Gamescreens
** Gamescreen transitions
   A gamescreen is simply a certain state of the world. It is defined by
   a function /create_mygamescreen/ that takes the world as argument and
   create the needed entities.

   Then, a menu screen will be define by several renderable and clickable
   entities.

   To get from one gamescreen to another, you can append a 
   /gamescreen_transition/ function to a clickable component:
   
   #+BEGIN_SRC python
     from ecs import World
     from mouse import Clickable, Button

     # entity creation ...

     entity.add_component(
         Clickable(
                  lambda: gamescreen_transition(world, create_mynewgamescreen),
                  Button.LEFT
                  )
     )
   #+END_SRC#

   Currently the /gamescreen_transition/ delete all the entities of the world
   and create the entities for the new game screen. It is a hard transition.

** Creating a gamescreen
   You just have to define a /create_mygamescreen/ function and describe your
   gamescreen as a bag of entities:

   #+BEGIN_SRC python
     from ecs import World
     
     def create_mygamescreen(world):
         my_first_entity = world.entity()
         my_fist_entity.add_components( ... )

         ...
    
   #+END_SRC#
