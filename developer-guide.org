#+title: The Family's treasure - developer guide

* License header

  This license header should be added in each python file:

  #+BEGIN_SRC python
    # This file is part of The Family's treasure tale.

    # The Family's treasure tale is free software: you can redistribute it
    # and/or modify it under the terms of the GNU General Public License
    # as published by the Free Software Foundation, either version 3 of
    # the License, or (at your option) any later version.

    # The Family's treasure tale is distributed in the hope that it will
    # be useful, but WITHOUT ANY WARRANTY; without even the implied
    # warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    # See the GNU General Public License for more details.

    # You should have received a copy of the GNU General Public License
    # along with The Family's treasure tale.  If not, see
    # <http://www.gnu.org/licenses/>.
  #+END_SRC
* Entity Component System
** World creation

   #+BEGIN_SRC python
   from ecs import World
   world = World()
   #+END_SRC

** Components

   Components are simple python classes. Their type is given by their
   class.

** Entities
*** Creation

    #+BEGIN_SRC python
    entity = world.entity()
    #+END_SRC

*** Adding component

    #+BEGIN_SRC python
      from geometry import Positionable
      # ...
      x, y = 10, 20
      entity.add_component(
          Positionable(x, y)
      )

      # Several components at one time
      entity.add_components(
          Renderable('image.png'),
          Clickable(lambda: print "Hello")
      )
    #+END_SRC

*** Requesting world

    #+BEGIN_SRC python
      for entity in world.get_entities([Positionable, Renderable]):
          print entity.get_component(Positionable).x
    #+END_SRC
* Graphics
** Creating a renderable component

   First of all, to be renderable, an entity must be positionable. If
   it is not the case, the entity simply won't be rendered.

   Then, to create Ã  renderable entity :

   #+BEGIN_SRC python
     from graphics import Renderable

     # entity creation ...

     entity.add_component(
         Renderable(render_func)
     )
   #+END_SRC

   Where /render_func/ is a function that contains the directives to
   draw the entity. It takes a Brush object as parameter. See the
   Brush class in [[file:family_treasure/graphics.py][graphics.py]] to learn its methods.

   *Important*: The position provided by the Positionable component of
   the entity is already injected in the Brush, so the drawing in the
   rendering function must be relative to it.

** Adding methods to Brush

   When a method is missing in the Brush class (e.g. drawing images or
   hearts or whatever), don't hesitate to add methods to it. Some
   considerations :

   - in Brush, /self.screen/ is a Screen object, so the pygame screen
     surface can be accessed using /self.screen.pygame_screen/.
   - do not forget to take in account the base position that has been
     injected to the Brush. the properties /x/ and /y/ will return
     them.
